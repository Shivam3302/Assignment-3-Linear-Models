import pandas as pd
import numpy as np
df = pd.read_csv('mobile_price_data.csv')
df
df.info()
for col in df.columns:
    print(col, df[col].unique())
    print('\n')
df._get_numeric_data()
 initial_df = df
 status=dict(zip(df.columns,list([0]*len(df.columns))))
 status
def print_processed_status(df):
    for col in df.columns:
        print(col, status[col])
 print_processed_status(df)
 def numericize(df,col):
    return pd.to_numeric(df[col].str.replace('[a-zA-Z]','',regex=True))
df.head()
 df['mp_speed'] = numericize(df,'mp_speed')
df['mp_speed'].unique()
status['mp_speed'] = 1
df['int_memory'] = numericize(df,'int_memory')
df['int_memory'].unique()
status['int_memory'] = 1
 df['ram'] = numericize(df,'ram')
df['ram'].unique()
status['ram'] = 1
df['battery_power'] = numericize(df,'battery_power')
df['battery_power'].unique()
status['battery_power'] = 1
 df['mob_width'] = numericize(df,'mob_width')
df['mob_width'].unique()
status['mob_width'] = 1
 df['mob_height'] = numericize(df,'mob_height')
df['mob_height'].unique()
status['mob_height'] = 1
df['mob_depth'] = numericize(df,'mob_depth')
df['mob_depth'].unique()
status['mob_depth'] = 1
df['mob_weight'] = numericize(df,'mob_weight')
df['mob_weight'].unique()
status['mob_weight'] = 1
df._get_numeric_data()
df.head()
def edit_numericize(df,col,strs_to_remove):
    processed = df[col]
    for string in strs_to_remove:
        processed = processed.str.replace(string,'',regex=False)
    return pd.to_numeric(processed)
df['mobile_price']=edit_numericize(df,'mobile_price',['₹',','])
df['mobile_price'].unique()
status['mobile_price'] = 1
import seaborn as sns
import numpy as np
mask = np.zeros_like(df.corr())
mask[np.triu_indices_from(mask)] = True

sns.heatmap(df.corr(),mask=mask, annot=True)
def plot_correlation_with_col(df, col):
    sorted_corr = df.corr().sort_values(col)[col][:-1]
    sorted_corr.plot(kind='bar',figsize = (10,5))
plot_correlation_with_col(df,'mobile_price')
df.head()
 def replace_regex_numericize(df,col,chars_to_remove):
    processed = df[col]
    for char in chars_to_remove:
        processed = processed.str.replace(char,'',regex=True)
    return pd.to_numeric(processed)
df['disp_size'] = replace_regex_numericize(df,'disp_size',[' cm .*'])
df['disp_size'].unique()
status['disp_size'] = 1
plot_correlation_with_col(df,'mobile_price')
 df.head()
def replace_regex(df,col,chars_to_remove):
    processed = df[col]
    for char in chars_to_remove:
        processed = processed.str.replace(char,'',regex=True)
    return processed
df['mobile_name_brand'] = replace_regex(df, 'mobile_name', [' . *'])
df['mobile_name_brand'].unique()
df['mobile_name_brand_short'] = replace_regex(df, 'mobile_name', [' .*'])
df['mobile_name_brand_short'].unique()
def convert_words_to_num(df,cat_col):
    return df[cat_col].astype('category').cat.codes
df['mobile_name_brand_new'] = convert_words_to_num(df,'mobile_name_brand')
df['mobile_name_brand_short_new'] = convert_words_to_num(df,'mobile_name_brand')
plot_correlation_with_col(df,'mobile_price')
status['mobile_name'] = 1
df.head()
df['mobile_color_cat']=convert_words_to_num(df,'mobile_color')
df['dual_sim_cat'] = convert_words_to_num(df,'dual_sim')
df['resolution_cat'] = convert_words_to_num(df,'resolution')
df['os_cat'] = convert_words_to_num(df,'os')
df['num_cores_cat'] = convert_words_to_num(df,'num_cores')
df['f_cam_cat'] = convert_words_to_num(df,'f_cam')
df['network_cat'] = convert_words_to_num(df,'network')
 status['mobile_color'] = 1
status['dual_sim'] = 1
status['resolution'] = 1
status['os'] = 1
status['num_cores'] = 1
status['f_cam'] = 1
status['network'] = 1
status
plot_correlation_with_col(df,'mobile_price')
df['dual_sim'].unique()
 df['dual_sim_ord'] = df['dual_sim'].replace('Dual Sim',2).replace('Single Sim',1)
df['num_cores'].unique()
df['num_cores_ord'] = df['num_cores'].replace('Octa Core',8).replace('Quad Core',4).replace('Single Core',1)
plot_correlation_with_col(df,'mobile_price')
def plot_grouped_correlation_with_col(df, col):
    sorted_corr = df.corr().sort_values(col)[col][:-1]
    sorted_corr.sort_index().plot(kind='bar',figsize = (10,5))
plot_grouped_correlation_with_col(df,'mobile_price')
df['battery_power'].unique()
 df['disp_size'].unique()
df['f_cam'].unique()
 df['f_cam_ord'] = replace_regex_numericize(df,'f_cam',['MP.*'])
plot_grouped_correlation_with_col(df,'mobile_price')
df['mob_depth'].unique()
df['mob_width'].unique()
df['mob_height'].unique()
for rownum, row in df.iterrows():
    ordered_dim = sorted([row['mob_depth'],row['mob_width'],row['mob_height']])
    df.at[rownum,'mob_depth_rearr'] = ordered_dim[0]
    df.at[rownum,'mob_width_rearr'] = ordered_dim[1]
    df.at[rownum,'mob_height_rearr'] = ordered_dim[2]
df['mob_height_rearr'].unique()
df['mob_width_rearr'].unique()
df['mob_depth_rearr'].unique()
plot_grouped_correlation_with_col(df,'mobile_price')
df['mob_weight'].unique()
df['mobile_color'].unique()
len(df['mobile_color'].unique())
df['mobile_color_basic'] = replace_regex(df,'mobile_color',['.* '])
df['mobile_color_basic'].unique()
df['mobile_color_basic_cat'] = convert_words_to_num(df,'mobile_color_basic')
plot_grouped_correlation_with_col(df,'mobile_price')
df['mp_speed'].unique()
df['network'].unique()
df['network_count'] = [len(x.split(',')) for x in df['network']]
df['network_count'].unique()
plot_grouped_correlation_with_col(df,'mobile_price')
plot_grouped_correlation_with_col(df,'mobile_price')
df['os'].unique()
df['os_version'] = replace_regex(df,'os',['[a-zA-z]* '])
df['os_version_cat'] = convert_words_to_num(df,'os_version')
df['os_version'].unique()
df['os_version_new'] = replace_regex_numericize(df,'os_version',['\..*'])
df['os_version_new'].unique()
plot_grouped_correlation_with_col(df, 'mobile_price')
df['ram'].unique()
df['resolution'].unique()
 df['res_dim'] = df['resolution'].replace('[pP]ixel.','',regex=True).replace('$','',regex=True).replace('[×]',' x ',regex=True)
df['res_dim'].unique()
 df['res_dims'] = [x.rsplit('x') for x in df['res_dim']]
df['res_dims']
df['res_dim_1'].unique()
plot_grouped_correlation_with_col(df,'mobile_price')
df['mob_screen_dimension'] = df['mob_width']*df['mob_height']
df['mob_screen_dimension'].unique()
df['mob_screen_dimension'].plot(kind='hist')
plot_grouped_correlation_with_col(df,'mobile_price') df['p_cam'].unique()
df['p_cam_max'] = [x[0:2].replace('M','') for x in df['p_cam']]
df['p_cam_max'] = numericize(df,'p_cam_max')
df['p_cam_max'].unique()
df['p_cam_count'] = [x.count('MP') for x in df['p_cam']]
df['p_cam_count'].unique()
 df['f_cam'].unique()
 df['f_cam_max'] = [x[0:2].replace('M','') for x in df['f_cam']]
df['f_cam_max'].unique()
df['f_cam_max'] = numericize(df,'f_cam_max')
df['f_cam_max'].unique()
df['f_cam_count'] = [x.count('MP') for x in df['f_cam']]
df['f_cam_count'].unique()
df['f_cam_max'].equals(df['f_cam_ord'])
df.drop('f_cam_ord',axis=1, inplace=True)
plot_grouped_correlation_with_col(df,'mobile_price')
 final_df = df[['battery_power','disp_size','dual_sim_ord','f_cam_max','f_cam_count','p_cam_max','p_cam_count','int_memory','mob_depth_rearr','mob_height_rearr','mob_width_rearr','mob_weight', 'mobile_color_basic_cat','mobile_name_brand_short_new','mp_speed','network_count','num_cores_ord','os_version_new','ram','res_dim_1','mobile_price']]
 cols=['Battery Power','Display Size','Sim count','Front camera max MP','Front camera count','Primary camera max MP','Primary camera count','Internal Memory','Mobile Depth','Mobile Height','Mobile Width','Mobile Weight', 'Mobile Color','Mobile Brand','Processor Speed','Networks','Core','OS','Ram','Resolution x','Resolution y','Mobile Price']
[1/1, 2:33 PM] Noopur: old_cols = ['battery_power','disp_size','dual_sim_ord','f_cam_max','f_cam_count','p_cam_max','p_cam_count','int_memory','mob_depth_rearr','mob_height_rearr','mob_width_rearr','mob_weight', 'mobile_color_basic_cat','mobile_name_brand_short_new','mp_speed','network_count','num_cores_ord','os_version_new','ram','res_dim_1','res_dim_2','mobile_price']
 col_mapping = dict(zip(old_cols,cols))
final_df=final_df.rename(columns=col_mapping)
final_df
plot_correlation_with_col(final_df,'Mobile Price')
final_df.to_csv('Mobile Price Factors.csv',index=False)
